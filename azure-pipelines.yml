# trigger:
#   branches:
#     include:
#       - develop

#  Use pipeline run button (manual UI or API)
pr: none
trigger: none  #  Explicitly disables automatic CI triggers

variables:
  - group: ovh-secrets
  - name: imageName
    value: dtma/frontend
  - name: imageTag
    value: $(Build.BuildId)
  - name: previousImageTag
    value: $previous_image_tag   # Will be set dynamically

stages:
  - stage: BuildAndPush
    jobs:
      - job: Build
        pool:
          vmImage: 'Ubuntu-latest'
        steps:
          - checkout: self
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                echo "Login to OVH registry"
                echo $(REGISTRY_PASSWORD) | docker login $(REGISTRY_URL) -u $(REGISTRY_USERNAME) --password-stdin

                echo "Build Docker image"
                docker build -t $(REGISTRY_URL)/dtma/$(imageName):$(imageTag) .

                echo "Push image to OVH registry"
                docker push $(REGISTRY_URL)/dtma/$(imageName):$(imageTag)

  - stage: Deploy
    dependsOn: BuildAndPush
    jobs:
      - job: Deploy
        pool:
          vmImage: 'Ubuntu-latest'
        steps:
          - task: DownloadSecureFile@1
            name: GetKubeconfig
            inputs:
              secureFile: 'kubeconfig-dtma.yml'

          - script: |
              mkdir -p ~/.kube
              cp $(GetKubeconfig.secureFilePath) ~/.kube/config

              echo "Updating deployment with image tag: $(imageTag)"
              sed -i "s|image: .*$|image: $(REGISTRY_URL)/dtma/$(imageName):$(imageTag)|" K8s/deployment.yaml

              echo "Deploying to Kubernetes"
              kubectl config use-context kubernetes-admin@DTMP
              kubectl apply -f K8s/deployment.yaml -n dev
            displayName: 'Deploy to OVH Kubernetes'

    - script: |
    echo "Fetching the previous image tag from Kubernetes annotations..."
    previous_image_tag=$(kubectl get deployment dtma-frontend --namespace=dev -o=jsonpath='{.metadata.annotations.last-image}' || echo "No previous tag found")
    
    if [ "$previous_image_tag" == "No previous tag found" ]; then
      echo "No previous image tag found. Manual rollback required."
      exit 1  # Optional: Fail the pipeline if the previous image tag is not found
    fi
    
    echo "Previous image tag: $previous_image_tag"
    echo "##vso[task.setvariable variable=previousImageTag]$previous_image_tag"  # Set previousImageTag as a variable in the pipeline
  displayName: 'Get Previous Image Tag'  

  - script: |
    echo "Waiting for 15 seconds to let the container start..."
    sleep 15  # Wait for 15 seconds to allow the container to start
  displayName: 'Wait for Container to Start'


  - script: |
    echo "Checking the status of the pods..."
    kubectl get pods --namespace=dev -l app=$(imageName) -o custom-columns=":status.phase" | grep -E "Running|Succeeded"
    if [ $? -ne 0 ]; then
      echo "Deployment failed! One or more pods are not in the Running state. Initiating rollback..."
      # Rollback to the previous image using the provided previousImageTag
      kubectl set image deployment/dtma-frontend $(imageName)=$(registry)/$(imageName):$(previousImageTag) --namespace=dev
      kubectl annotate deployment/dtma-frontend last-image=$(imageTag) --overwrite --namespace=dev  # Annotate for audit
    else
      echo "All pods are running successfully. Deployment was successful."
    fi
 displayName: 'Check Pods Status and Trigger Rollback if Needed'

